name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --draft \
            --title "Release ${{ steps.get_version.outputs.version }}" \
            --generate-notes

  build:
    name: Build - ${{ matrix.name }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - x86_64 (glibc)
          - name: Linux x86_64 (glibc)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
            artifact_name: dua
            asset_name: dua-v${{ needs.create-release.outputs.version }}-linux-x86_64
          
          # Linux - x86_64 (musl, static)
          - name: Linux x86_64 (musl)
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: false
            artifact_name: dua
            asset_name: dua-v${{ needs.create-release.outputs.version }}-linux-x86_64-musl
          
          # Linux - ARM64
          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
            artifact_name: dua
            asset_name: dua-v${{ needs.create-release.outputs.version }}-linux-aarch64
          
          # Windows - x86_64
          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
            artifact_name: dua.exe
            asset_name: dua-v${{ needs.create-release.outputs.version }}-windows-x86_64.exe
          
          # macOS - x86_64 (Intel)
          - name: macOS x86_64
            os: macos-13
            target: x86_64-apple-darwin
            use-cross: false
            artifact_name: dua
            asset_name: dua-v${{ needs.create-release.outputs.version }}-macos-x86_64
          
          # macOS - ARM64 (Apple Silicon)
          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
            artifact_name: dua
            asset_name: dua-v${{ needs.create-release.outputs.version }}-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: |
          BUILD_TOOL="${{ matrix.use-cross && 'cross' || 'cargo' }}"
          $BUILD_TOOL build --release --target ${{ matrix.target }}
        shell: bash

      - name: Run tests
        run: |
          BUILD_TOOL="${{ matrix.use-cross && 'cross' || 'cargo' }}"
          $BUILD_TOOL test --release --target ${{ matrix.target }}
        shell: bash

      - name: Prepare artifact
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.artifact_name }}"
          cp "$BINARY_PATH" "${{ matrix.asset_name }}"
          
          # Create archive
          if [ "${{ runner.os }}" != "Windows" ]; then
            # tarball for Unix-like systems
            tar czf "${{ matrix.asset_name }}.tar.gz" "${{ matrix.asset_name }}"
            shasum -a 256 "${{ matrix.asset_name }}.tar.gz" > "${{ matrix.asset_name }}.tar.gz.sha256"
            echo "ASSET=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
            echo "ASSET_SUM=${{ matrix.asset_name }}.tar.gz.sha256" >> $GITHUB_ENV
          else
            # zip for Windows
            7z a "${{ matrix.asset_name }}.zip" "${{ matrix.asset_name }}"
            certutil -hashfile "${{ matrix.asset_name }}.zip" SHA256 > "${{ matrix.asset_name }}.zip.sha256"
            echo "ASSET=${{ matrix.asset_name }}.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=${{ matrix.asset_name }}.zip.sha256" >> $GITHUB_ENV
          fi
          
          # Get binary size
          SIZE=$(du -h "${{ matrix.asset_name }}" | cut -f1)
          echo "Binary size: $SIZE"
        shell: bash

      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}
