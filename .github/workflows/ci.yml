name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test - ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: false
          
          # Linux - ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          
          # Windows - x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          
          # macOS - x86_64
          - os: macos-13  # Intel
            target: x86_64-apple-darwin
            use-cross: false
          
          # macOS - ARM64 (Apple Silicon)
          - os: macos-latest  # M1/M2
            target: aarch64-apple-darwin
            use-cross: false

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set build tool
        id: build-tool
        run: echo "tool=${{ matrix.use-cross && 'cross' || 'cargo' }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build
        run: ${{ steps.build-tool.outputs.tool }} build --release --target ${{ matrix.target }}
        shell: bash

      - name: Run tests
        run: ${{ steps.build-tool.outputs.tool }} test --release --target ${{ matrix.target }}
        shell: bash

      - name: Check binary size
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            BINARY="target/${{ matrix.target }}/release/dua.exe"
          else
            BINARY="target/${{ matrix.target }}/release/dua"
          fi
          
          if [ -f "$BINARY" ]; then
            SIZE=$(du -h "$BINARY" | cut -f1)
            echo "Binary size: $SIZE"
            
            # Check if binary is under 10MB
            SIZE_BYTES=$(stat -c%s "$BINARY" 2>/dev/null || stat -f%z "$BINARY" 2>/dev/null)
            if [ "$SIZE_BYTES" -gt 10485760 ]; then
              echo "::warning::Binary size ($SIZE) exceeds 10MB threshold"
            fi
          fi
        shell: bash

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage summary
        run: cargo llvm-cov --all-features --workspace
